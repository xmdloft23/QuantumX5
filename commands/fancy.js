// Font maps
const cursiveMap = {
  a: 'ùí∂', b: 'ùí∑', c: 'ùí∏', d: 'ùíπ', e: 'ùëí', f: 'ùíª', g: 'ùëî', h: 'ùíΩ', i: 'ùíæ', j: 'ùíø', k: 'ùìÄ',
  l: 'ùìÅ', m: 'ùìÇ', n: 'ùìÉ', o: 'ùëú', p: 'ùìÖ', q: 'ùìÜ', r: 'ùìá', s: 'ùìà', t: 'ùìâ', u: 'ùìä',
  v: 'ùìã', w: 'ùìå', x: 'ùìç', y: 'ùìé', z: 'ùìè',
  A: 'ùíú', B: 'ùêµ', C: 'ùíû', D: 'ùíü', E: 'ùê∏', F: 'ùêπ', G: 'ùí¢', H: 'ùêª', I: 'ùêº', J: 'ùí•',
  K: 'ùí¶', L: 'ùêø', M: 'ùëÄ', N: 'ùí©', O: 'ùí™', P: 'ùí´', Q: 'ùí¨', R: 'ùëÖ', S: 'ùíÆ', T: 'ùíØ',
  U: 'ùí∞', V: 'ùí±', W: 'ùí≤', X: 'ùí≥', Y: 'ùí¥', Z: 'ùíµ'
};

const boldMap = {
  a: 'ùêö', b: 'ùêõ', c: 'ùêú', d: 'ùêù', e: 'ùêû', f: 'ùêü', g: 'ùê†', h: 'ùê°', i: 'ùê¢', j: 'ùê£',
  k: 'ùê§', l: 'ùê•', m: 'ùê¶', n: 'ùêß', o: 'ùê®', p: 'ùê©', q: 'ùê™', r: 'ùê´', s: 'ùê¨', t: 'ùê≠',
  u: 'ùêÆ', v: 'ùêØ', w: 'ùê∞', x: 'ùê±', y: 'ùê≤', z: 'ùê≥',
  A: 'ùêÄ', B: 'ùêÅ', C: 'ùêÇ', D: 'ùêÉ', E: 'ùêÑ', F: 'ùêÖ', G: 'ùêÜ', H: 'ùêá', I: 'ùêà', J: 'ùêâ',
  K: 'ùêä', L: 'ùêã', M: 'ùêå', N: 'ùêç', O: 'ùêé', P: 'ùêè', Q: 'ùêê', R: 'ùêë', S: 'ùêí', T: 'ùêì',
  U: 'ùêî', V: 'ùêï', W: 'ùêñ', X: 'ùêó', Y: 'ùêò', Z: 'ùêô'
};

const italicMap = {
  a: 'ùò¢', b: 'ùò£', c: 'ùò§', d: 'ùò•', e: 'ùò¶', f: 'ùòß', g: 'ùò®', h: 'ùò©', i: 'ùò™', j: 'ùò´',
  k: 'ùò¨', l: 'ùò≠', m: 'ùòÆ', n: 'ùòØ', o: 'ùò∞', p: 'ùò±', q: 'ùò≤', r: 'ùò≥', s: 'ùò¥', t: 'ùòµ',
  u: 'ùò∂', v: 'ùò∑', w: 'ùò∏', x: 'ùòπ', y: 'ùò∫', z: 'ùòª',
  A: 'ùòà', B: 'ùòâ', C: 'ùòä', D: 'ùòã', E: 'ùòå', F: 'ùòç', G: 'ùòé', H: 'ùòè', I: 'ùòê', J: 'ùòë',
  K: 'ùòí', L: 'ùòì', M: 'ùòî', N: 'ùòï', O: 'ùòñ', P: 'ùòó', Q: 'ùòò', R: 'ùòô', S: 'ùòö', T: 'ùòõ',
  U: 'ùòú', V: 'ùòù', W: 'ùòû', X: 'ùòü', Y: 'ùò†', Z: 'ùò°'
};

const boldItalicMap = {
  a: 'ùôñ', b: 'ùôó', c: 'ùôò', d: 'ùôô', e: 'ùôö', f: 'ùôõ', g: 'ùôú', h: 'ùôù', i: 'ùôû', j: 'ùôü',
  k: 'ùô†', l: 'ùô°', m: 'ùô¢', n: 'ùô£', o: 'ùô§', p: 'ùô•', q: 'ùô¶', r: 'ùôß', s: 'ùô®', t: 'ùô©',
  u: 'ùô™', v: 'ùô´', w: 'ùô¨', x: 'ùô≠', y: 'ùôÆ', z: 'ùôØ',
  A: 'ùòº', B: 'ùòΩ', C: 'ùòæ', D: 'ùòø', E: 'ùôÄ', F: 'ùôÅ', G: 'ùôÇ', H: 'ùôÉ', I: 'ùôÑ', J: 'ùôÖ',
  K: 'ùôÜ', L: 'ùôá', M: 'ùôà', N: 'ùôâ', O: 'ùôä', P: 'ùôã', Q: 'ùôå', R: 'ùôç', S: 'ùôé', T: 'ùôè',
  U: 'ùôê', V: 'ùôë', W: 'ùôí', X: 'ùôì', Y: 'ùôî', Z: 'ùôï'
};

const squaredMap = {
  A: 'üÑ∞', B: 'üÑ±', C: 'üÑ≤', D: 'üÑ≥', E: 'üÑ¥', F: 'üÑµ', G: 'üÑ∂', H: 'üÑ∑', I: 'üÑ∏', J: 'üÑπ',
  K: 'üÑ∫', L: 'üÑª', M: 'üÑº', N: 'üÑΩ', O: 'üÑæ', P: 'üÑø', Q: 'üÖÄ', R: 'üÖÅ', S: 'üÖÇ', T: 'üÖÉ',
  U: 'üÖÑ', V: 'üÖÖ', W: 'üÖÜ', X: 'üÖá', Y: 'üÖà', Z: 'üÖâ'
};

// Fonts 4‚Äì7 and 10 with maps
const classicFonts = [
    (t) => t, // 1. Normal
    (t) => t.toUpperCase(), // 2. UPPERCASE
    (t) => t.toLowerCase(), // 3. lowercase
    (t) => [...t].map(c => cursiveMap[c] || c).join(''), // 4. Cursive ‚úÖ
    (t) => [...t].map(c => boldMap[c] || c).join(''),    // 5. Bold ‚úÖ
    (t) => [...t].map(c => italicMap[c] || c).join(''),  // 6. Italic ‚úÖ
    (t) => [...t].map(c => boldItalicMap[c] || c).join(''), // 7. Bold Italic ‚úÖ
    (t) => `\`\`\`${t}\`\`\``, // 8. Monospace
    (t) => [...t].map(c => '‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©'['abcdefghijklmnopqrstuvwxyz'.indexOf(c.toLowerCase())] || c).join(''), // 9. Circled
    (t) => [...t].map(c => squaredMap[c.toUpperCase()] || c).join(''), // 10. Squared ‚úÖ
    (t) => [...t].map(c => `(${c})`).join(''), // 11. Bracketed
    (t) => [...t].map(c => `ÍìØBCD∆éÍûí∆ë∆ìHI≈øÍû∞Íû≠Íû§OÍûÆÍû∞Íû∞Íû∞Íû∞Íû∞Íû∞Íû∞Íû∞Íû∞`['ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(c.toUpperCase())] || c).join(''), // 12. Weird caps
    (t) => [...t].map(c => c + 'Õ§').join(''), // 13. Ghost text
    (t) => t.split('').join(' '), // 14. Spaced
    (t) => t.split('').map(c => c + 'ÕúÕ°').join(''), // 15. Hacker style
    (t) => `‡ºé${t}‡ºé`, // 16. Double brackets
    (t) => `„Äå${t}„Äç`, // 17. Japanese-style quote
    (t) => `„Äé‚òÖ${t}‚òÖ„Äè`, // 18. Star-bracket
    (t) => `‚ü¶${t}‚üß`, // 19. Math brackets
    (t) => `*${t}*`, // 20. Classic bold marker
    // ... continue other styles unchanged
];



const decorativeFonts = [
    // 21‚Äì30: Emojified / decorative styles
    (t) => `‚ú® ${t} ‚ú®`,
    (t) => `üî• ${t.toUpperCase()} üî•`,
    (t) => [...t].map(c => `üíÄ${c}`).join(''),
    (t) => `‡ºí ${t} ‡ºí`,
    (t) => `‡ºº ${t} ‡ºΩ`,
    (t) => `‚òÖÂΩ° ${t} ÂΩ°‚òÖ`,
    (t) => `·Åå${t.toUpperCase()}·Åå`,
    (t) => `üéÄ ${t} üéÄ`,
    (t) => `üëë${t}üëë`,
    (t) => `‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü:* ${t} *:ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß`,
];

const fancyFonts = [...classicFonts, ...decorativeFonts];

export async function fancyCommand(message, client) {
    const remoteJid = message.key.remoteJid;
    const text = message.message?.extendedTextMessage?.text || message.message?.conversation || '';
    const parts = text.trim().split(' ');
    const args = parts.slice(1).filter(p => p.trim() !== '');

    // Preview all if no number or only whitespace
    if (args.length === 0) {

        const sampleText = 'Dev Senku';

        const preview = fancyFonts.map((f, i) => `*${i + 1}.* ${f(sampleText)}`).join('\n\n');

        return await client.sendMessage(remoteJid, { text: preview });

    }else if (isNaN(parseInt(args[0]))) {

        const sampleText = `${args.slice(1).join(' ')}`;

        const preview = fancyFonts.map((f, i) => `*${i + 1}.* ${f(sampleText)}`).join('\n\n');

    }

    const styleIndex = parseInt(args[0]) - 1;

    const content = args.slice(1).join(' ');

    if (styleIndex < 0 || styleIndex >= fancyFonts.length) {

        return await client.sendMessage(remoteJid, {

            text: `‚ùå Invalid style number. Use *.fancy* to view styles.`,
        });
    }

    if (!content.trim()) {
        return await client.sendMessage(remoteJid, {
            text: `‚ö†Ô∏è Please provide text to style.\nExample: *.fancy 3 Hello World!*`,
        });
    }

    const styled = fancyFonts[styleIndex](content);
    await client.sendMessage(remoteJid, { text: styled });
}

export default fancyCommand;
